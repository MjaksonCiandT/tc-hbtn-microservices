Microserviços é uma arquitetura de software, onde consistem quebrar o projeto(Software) em partes de serviços menores, tornando essas partes independetes, e a comunicação entre tais partes se dar por meios de APIs. A idéa é promoverr grande agilidade em times de desenvolvimento, permitindo que o desenvolvedor trabalhe de maneira mais fácil com diferentes tipos de linguagens de programação dentro de um mesmo sistema, que trabalham serviços diferentes da mesma aplicação e quando ocorrer um problema/bug em determinada parte as demais conitnuem funcionando sem ser afetada pelo serviço com problema.

Na arquitetura monolítica há uma dependência entre os serviços de uma mesma aplicação. Elas são projetadas para trabalhar juntas o tempo todo. Se o desenvolvedor precisa fazer mudanças em apenas algumas partes do sistema, obrigatoriamente ele vai precisar atualizar o sistema como um todo. Com a ascensão do desenvolvimento ágil, o modelo de arquitetura monolítica passou a não ser mais visto como melhor opção para aplicações robustas, uma vez que a alteração de um único serviço pode mexer com o funcionamento de outras features dependentes.

Os beneficios dos microsserviços são: 
1 - Simplicidade para implantar e atualizar: simplificar a implementação e a atualização de sistemas. Como funciona baseado em containers independentes, o sistema pode ser facilmente modificado. Por exemplo, caso aconteça algum problema em um microsserviço, o restante do sistema não será prejudicado, já que a questão será tratada de modo isolado.
2 - Flexibilidade para usar diferentes tecnologias: permite que sejam utilizados dentro do sistema diferentes linguagens de programação, estruturas e ambientes. Assim, o sistema pode ser projetado de maneira que as suas partes tenham o melhor desempenho e perfomance possível.
3 - Escalabilidade para modificar ou adicionar recursos: Devido ao fato de que os serviços são divididos em pequenas partes, a arquitetura de microserviços oferece escalabilidade à medida que é possível modificar ou adicionar novos recursos ao sistema sem precisar mexer no núcleo dele, evitando que ocorram problemas e conflitos.

O cliente e os serviços podem se comunicar por vários tipos de comunicação diferentes, cada um direcionando a um cenário diferente e a metas diferentes: Protocolo síncrono. HTTP é um protocolo síncrono. O cliente envia uma solicitação e espera uma resposta do serviço. Isso é independente da execução do código do cliente que pode ser síncrona (o thread é bloqueado) ou assíncrona (o thread não é bloqueado e a resposta acabará alcançando um retorno de chamada). Protocolo assíncrono. Outros protocolos, como o AMQP (um protocolo compatível com vários sistemas operacionais e ambientes de nuvem), usam mensagens assíncronas. O código do cliente ou o remetente da mensagem geralmente não espera uma resposta. Ele apenas envia a mensagem como ao enviar uma mensagem para uma fila do RabbitMQ ou para qualquer outro agente de mensagens.
